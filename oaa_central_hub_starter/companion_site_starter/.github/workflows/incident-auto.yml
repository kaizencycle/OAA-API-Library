name: incident-auto
on:
  schedule:
    - cron: "*/5 * * * *"   # every 5 minutes
  workflow_dispatch: {}

jobs:
  probe-and-open:
    runs-on: ubuntu-latest
    env:
      HUB_BASE_URL: ${{ vars.HUB_BASE_URL }}  # e.g. https://oaa-hub.onrender.com
      # Optional: if your /api/dev routes need a bearer or basic auth, add it as a masked secret:
      HUB_AUTH_HEADER: ${{ secrets.HUB_AUTH_HEADER }} # e.g. "Authorization: Bearer xxxx"
    steps:
      - name: Sanity check HUB_BASE_URL
        run: |
          if [ -z "${HUB_BASE_URL}" ]; then
            echo "HUB_BASE_URL not set (add in Settings → Variables)"
            exit 1
          fi

      - name: Fetch Sentinel status + vitals
        id: pull
        shell: bash
        run: |
          HDR=""
          if [ -n "${HUB_AUTH_HEADER}" ]; then HDR="-H '${HUB_AUTH_HEADER}'"; fi

          STATUS_JSON=$(bash -lc "curl -sS ${HDR} ${HUB_BASE_URL}/api/dev/sentinel/status || echo '{}'")
          VITALS_JSON=$(bash -lc "curl -sS ${HDR} ${HUB_BASE_URL}/api/dev/sentinel/vitals || echo '{}'")

          echo "status=${STATUS_JSON}" >> $GITHUB_OUTPUT
          echo "vitals=${VITALS_JSON}" >> $GITHUB_OUTPUT

          # Extract states via jq
          S_STATE=$(echo "${STATUS_JSON}" | jq -r '.state // "unknown"')
          V_STATE=$(echo "${VITALS_JSON}" | jq -r '.state // "unknown"')

          # Rank and pick worst (red > amber > green)
          function rank(){ case "$1" in red) echo 3;; amber) echo 2;; green) echo 1;; *) echo 0;; esac; }
          if [ $(rank "$S_STATE") -ge $(rank "$V_STATE") ]; then WORST="$S_STATE"; else WORST="$V_STATE"; fi

          echo "worst=${WORST}" >> $GITHUB_OUTPUT

      - name: Short-circuit if green/unknown
        if: ${{ steps.pull.outputs.worst == 'green' || steps.pull.outputs.worst == 'unknown' }}
        run: echo "No incident needed."

      - name: Ensure jq is available
        if: ${{ steps.pull.outputs.worst != 'green' && steps.pull.outputs.worst != 'unknown' }}
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Build issue body from template fields
        id: compose
        if: ${{ steps.pull.outputs.worst != 'green' && steps.pull.outputs.worst != 'unknown' }}
        run: |
          NOW_UTC=$(date -u +"%Y-%m-%d %H:%M:%S")
          SNAP_JSON=$(jq -n --arg status '${{ steps.pull.outputs.status }}' \
                           --arg vitals '${{ steps.pull.outputs.vitals }}' \
                           '{
                              status: ($status|fromjson? // {}),
                              vitals: ($vitals|fromjson? // {})
                            }')

          SUMMARY="Auto-detected ${ { steps.pull.outputs.worst } } by Sentinel"
          TITLE="[Incident] ${SUMMARY}"

          # Persist to outputs (GitHub multiline safe)
          {
            echo "title<<EOF"
            echo "$TITLE"
            echo "EOF"
            echo "timestamp<<EOF"
            echo "$NOW_UTC"
            echo "EOF"
            echo "snapshot<<EOF"
            echo "$SNAP_JSON"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Skip if similar open incident exists (last 6h)
        id: dedupe
        if: ${{ steps.pull.outputs.worst != 'green' && steps.pull.outputs.worst != 'unknown' }}
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
              labels: "incident,sentinel"
            });
            const sixHoursAgo = Date.now() - 6*60*60*1000;
            const worst = `${{ steps.pull.outputs.worst }}`;
            const recent = issues.find(i => {
              const t = new Date(i.created_at).getTime();
              return t >= sixHoursAgo && /Incident/i.test(i.title) && i.title.includes(worst);
            });
            core.setOutput("exists", recent ? "1" : "0");
            if (recent) core.info(`Existing incident found: #${recent.number}`);

      - name: Open incident issue
        if: ${{ steps.dedupe.outputs.exists != '1' && steps.pull.outputs.worst != 'green' && steps.pull.outputs.worst != 'unknown' }}
        uses: actions/github-script@v7
        with:
          script: |
            const title = process.env.ISSUE_TITLE;
            const snapshot = process.env.ISSUE_SNAPSHOT;
            const ts = process.env.ISSUE_TS;
            const worst = process.env.WORST;

            const body = [
              "## 🧭 Context",
              "Auto-generated by **Sentinel Suite** (workflow: `incident-auto`).",
              "",
              "**Detection Timestamp (UTC):** " + ts,
              "**Severity:** " + (worst === "red" ? "🔴 Red — outage / halt" : "🟡 Amber — degraded"),
              "",
              "### 🔍 Snapshot",
              "```json",
              snapshot,
              "```",
              "",
              "### 💡 Suspected Root Cause",
              "_TBD_",
              "",
              "### 🧯 Mitigation Steps Taken",
              "_TBD_",
              "",
              "### 🚀 Follow-Up / Next Steps",
              "_TBD_",
              "",
              "> This issue follows the Operational Incident template and will be linked in the Civic Ledger."
            ].join("\n");

            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              labels: ["incident","sentinel","reliability"]
            });
            core.info(`Opened incident #${issue.number}`);
        env:
          ISSUE_TITLE: ${{ steps.compose.outputs.title }}
          ISSUE_SNAPSHOT: ${{ steps.compose.outputs.snapshot }}
          ISSUE_TS: ${{ steps.compose.outputs.timestamp }}
          WORST: ${{ steps.pull.outputs.worst }}